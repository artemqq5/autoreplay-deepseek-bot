import logging
from collections import defaultdict

from openai import AsyncOpenAI

from bot.config import DEEPDEEK_KEY
from bot.data.constats import DEFAULT_DEEPSEEK_CONTENT


class DeepSeekAPI:

    def __init__(self):
        self.__client = AsyncOpenAI(api_key=DEEPDEEK_KEY, base_url="https://api.deepseek.com")
        self._dialogs = defaultdict(list)

    @staticmethod
    def _norm_text(raw: str | None) -> str | None:
        """–û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if raw is None:
            return None
        raw = raw.strip()
        return raw if raw else None

    async def make_request(self, chat_id: int, user_message: str, system_prompt: str = DEFAULT_DEEPSEEK_CONTENT):
        try:
            if not self._dialogs[chat_id] or self._dialogs[chat_id][0]["content"] != system_prompt:
                self._dialogs[chat_id] = [{"role": "system", "content": system_prompt}]

            history = self._dialogs[chat_id]

            if not history:
                history.append({"role": "system", "content": system_prompt})
            else:
                history[0]["content"] = system_prompt

            history.append({"role": "user", "content": user_message})

            response = await self.__client.chat.completions.create(
                model="deepseek-chat",
                messages=history,
                temperature=0.7,
                stream=False
            )

            assistant_reply = response.choices[0].message.content

            # 3. –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó
            history.append({"role": "assistant", "content": assistant_reply})

            # 4. (–æ–ø—Ü—ñ–π–Ω–æ) –æ–±—Ä—ñ–∑–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –¥–æ N –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            MAX_TURNS = 20
            if len(history) > MAX_TURNS * 2 + 1:  # *2 –±–æ user+assistant
                # –∑–∞–ª–∏—à–∞—î–º–æ system + –æ—Å—Ç–∞–Ω–Ω—ñ MAX_TURNS –ø–∞—Ä
                self._dialogs[chat_id] = [history[0]] + history[-MAX_TURNS * 2:]

            # –ª–æ–≥
            logging.info(f"ü§ñ DeepSeek:\nQ:\n{user_message}\n\nA:\n{assistant_reply}\n{'-'*30}")
            return assistant_reply
        except Exception as e:
            logging.error(e)
            return None
